package mjc;

import java_cup.runtime.*;
import org.apache.log4j.*;
import mjc.ast.*;

parser code {:

	boolean errorDetected;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left).append(", ").append(((Symbol)info).right);
        log.error(msg.toString());
    }


:}

init with {:
	errorDetected = false;
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	// if (s != null && s.value != null) 
	//	 log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROG, BREAK, CLASS, ELSE, CONST, IF, NEW, PRINT, READ, RETURN, VOID, EXTENDS, CONTINUE;
terminal FOR, STATIC, NAMESPACE;

terminal ARROW, PLUS, MINUS, MUL, DIV, MOD, EQUAL, AND, OR, EQUALSTO, DIFFERENT, GREATER;
terminal GREATERE, LESS, LESSE, INC, DEC, SEMI, COLON, DOT, COMMA;

terminal LPAREN, RPAREN, LBRACE, RBRACE, LSQBRACE, RSQBRACE;

terminal String BOOL;
terminal Integer NUMBER ;
terminal String IDENT ;
terminal String CHAR;

nonterminal Program Program;
nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgName;

nonterminal NamespaceList NamespaceList;
nonterminal Namespace Namespace;
nonterminal rs.etf.pp1.symboltable.concepts.Obj NamespaceName;

nonterminal MethodDeclList MethodDeclList;
nonterminal MethodDecl MethodDecl;
nonterminal OptFormPars OptFormPars;
nonterminal FormPars FormPars;
nonterminal FormParam FormParam;
nonterminal rs.etf.pp1.symboltable.concepts.Obj MethodName;
nonterminal rs.etf.pp1.symboltable.concepts.Struct MethodType;

nonterminal DeclList DeclList;
nonterminal Declaration Declaration;
nonterminal ConstDecl ConstDecl;
nonterminal ConstList ConstList; 
nonterminal java.lang.Integer Constant;


nonterminal VarDeclList VarDeclList;
nonterminal VarDecl VarDecl;
nonterminal VarList VarList;
nonterminal ArrVar ArrVar; 
nonterminal rs.etf.pp1.symboltable.concepts.Obj Variable;

nonterminal ClassDecl ClassDecl;
nonterminal ClassInitList ClassInitList;
nonterminal ClassNoInitList ClassNoInitList;
nonterminal Extend Extend;
nonterminal ClassMethods ClassMethods;
nonterminal rs.etf.pp1.symboltable.concepts.Obj ClassName;

nonterminal Static Static;
nonterminal StaticDecl StaticDecl;
nonterminal StaticInitList StaticInitList;
nonterminal StaticInitializer StaticInitializer;
nonterminal rs.etf.pp1.symboltable.concepts.Obj StaticInitStart;

nonterminal rs.etf.pp1.symboltable.concepts.Struct Type;
nonterminal ParamType ParamType;

nonterminal Call Call;
nonterminal ActPars ActPars;
nonterminal CallStart CallStart;
nonterminal CallEnd CallEnd;
nonterminal OptParen OptParen;

nonterminal rs.etf.pp1.symboltable.concepts.Struct Expr,Term;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Factor, NewFactor, DesignatorFactor;

nonterminal rs.etf.pp1.symboltable.concepts.Obj Designator; 
nonterminal rs.etf.pp1.symboltable.concepts.Obj DesignatorList;
nonterminal rs.etf.pp1.symboltable.concepts.Struct DesignatorStatement;
nonterminal rs.etf.pp1.symboltable.concepts.Obj DesignatorRef;

nonterminal Label Label;
nonterminal Index Index;
nonterminal IndexStart IndexStart;
nonterminal IndexEnd IndexEnd;
nonterminal rs.etf.pp1.symboltable.concepts.Obj Members; 

nonterminal	java.lang.Integer UnMinus;
nonterminal Assignop Assignop;
nonterminal Relop Relop;
nonterminal Addop Addop;
nonterminal Mulop Mulop;
nonterminal Condition Condition;
nonterminal CondTerm CondTerm;
nonterminal CondFact CondFact;
nonterminal OptCondFact OptCondFact;
nonterminal OptCommaNumConst OptCommaNumConst;
nonterminal DesignStmtList DesignStmtList;
nonterminal OptDesignStmtList OptDesignStmtList;
nonterminal	ForLoopMatched ForLoopMatched;
nonterminal ForLoopUnmatched ForLoopUnmatched;
nonterminal Matched Matched;
nonterminal Unmatched Unmatched;
nonterminal ForStart ForStart;
nonterminal IfStart IfStart;
nonterminal ElseStart ElseStart;
nonterminal ForCond ForCond;
nonterminal IfCond IfCond;
nonterminal ForBodyStart ForBodyStart;
nonterminal IfBodyStart IfBodyStart;
nonterminal Statement Statement;
nonterminal StatementList StatementList;
nonterminal MulAssignStart MulAssignStart;


Program 			::= (Program) PROG ProgName:P1 NamespaceList:N2 DeclList:D3 LBRACE MethodDeclList:M4 RBRACE {: RESULT=new Program(P1, N2, D3, M4); RESULT.setLine(P1left); :};

ProgName			::= (ProgName) IDENT:Name {: RESULT=new ProgName(Name); RESULT.setLine(Nameleft); :};

NamespaceList 		::= (NamespaceListDecl) NamespaceList:N1 Namespace:N2 {: RESULT=new NamespaceListDecl(N1, N2); RESULT.setLine(N1left); :}
						|	
						(NoNamespaceDecl) {: RESULT=new NoNamespaceDecl(); :};

Namespace			::= (Namespace) NAMESPACE NamespaceName:N1 LBRACE DeclList:D2 LBRACE MethodDeclList:M3 RBRACE RBRACE {: RESULT=new Namespace(N1, D2, M3); RESULT.setLine(N1left); :};

NamespaceName		::= (NamespaceName) IDENT:Name {: RESULT=new NamespaceName(Name); RESULT.setLine(Nameleft); :};


ClassDecl			::= (ClassInitListDecl) ClassInitList:C1 {: RESULT=new ClassInitListDecl(C1); RESULT.setLine(C1left); :}
						|
						(ClassNoInitListDecl) ClassNoInitList:C1 {: RESULT=new ClassNoInitListDecl(C1); RESULT.setLine(C1left); :};

ClassInitList		::= (ClassInitList) CLASS ClassName:C1 Extend:E2 LBRACE StaticDecl:S3 StaticInitList:S4 VarDeclList:V5 ClassMethods:C6 RBRACE {: RESULT=new ClassInitList(C1, E2, S3, S4, V5, C6); RESULT.setLine(C1left); :};

ClassNoInitList		::= (ClassNoInitList) CLASS ClassName:C1 Extend:E2 LBRACE StaticDecl:S3 VarDeclList:V4 ClassMethods:C5 RBRACE {: RESULT=new ClassNoInitList(C1, E2, S3, V4, C5); RESULT.setLine(C1left); :};

ClassName 			::= (ClassName) IDENT:Name {: RESULT=new ClassName(Name); RESULT.setLine(Nameleft); :};

/* CURR 1 */

Extend				::= (Extends) EXTENDS Type:T1 {: RESULT=new Extends(T1); RESULT.setLine(T1left); :} 
						|
						(NoExtends) {: RESULT=new NoExtends(); :};
						
StaticDecl			::= (StaticDeclar)StaticDecl:S1 Static:S2 VarDecl:V3 {: RESULT=new StaticDeclar(S1, S2, V3); RESULT.setLine(S1left); :}
						|
						(NoStaticDecl) {: RESULT=new NoStaticDecl(); :};

Static				::= STATIC {: RESULT=new StaticDerived1(); :};

StaticInitList		::= (StaticInits) StaticInitList:S1 StaticInitializer:S2 {: RESULT=new StaticInits(S1, S2); RESULT.setLine(S1left); :}
						|
						(NoStaticInit) StaticInitializer:S1 {: RESULT=new NoStaticInit(S1); RESULT.setLine(S1left); :};

ClassMethods		::= (ClassMethodsDecl) LBRACE MethodDeclList:M1 RBRACE {: RESULT=new ClassMethodsDecl(M1); RESULT.setLine(M1left); :}
						|
						(NoClassMethods) {: RESULT=new NoClassMethods(); :};

MethodDeclList		::= (MethodListDecl) MethodDeclList:M1 MethodDecl:M2 {: RESULT=new MethodListDecl(M1, M2); RESULT.setLine(M1left); :}
						|
						(NoMethodDecl) {: RESULT=new NoMethodDecl(); :};

MethodDecl			::= (MethodDecl) MethodType:M1 MethodName:M2 LPAREN OptFormPars:O3 RPAREN VarDeclList:V4 LBRACE StatementList:S5 RBRACE {: RESULT=new MethodDecl(M1, M2, O3, V4, S5); RESULT.setLine(M1left); :};

MethodName			::= (MethodName) IDENT:Name {: RESULT=new MethodName(Name); RESULT.setLine(Nameleft); :};

MethodType			::= (MethodRetType) Type:T1 {: RESULT=new MethodRetType(T1); RESULT.setLine(T1left); :}
						|
						(MethodRetVoid) VOID {: RESULT=new MethodRetVoid(); :};

OptFormPars 		::= (FormParsExist) FormPars:F1 {: RESULT=new FormParsExist(F1); RESULT.setLine(F1left); :}
						|
						(NoFormPars) {: RESULT=new NoFormPars(); :};

FormPars			::= (FormParList) FormPars:F1 COMMA FormParam:F2 {: RESULT=new FormParList(F1, F2); RESULT.setLine(F1left); :}
						|
						(OneFormPar) FormParam:F1 {: RESULT=new OneFormPar(F1); RESULT.setLine(F1left); :};	

FormParam			::= (FormParam) ParamType:P1 Variable:V2 {: RESULT=new FormParam(P1, V2); RESULT.setLine(P1left); :};

StaticInitializer 	::= (StaticInitializer) StaticInitStart:S1 LBRACE StatementList:S2 RBRACE {: RESULT=new StaticInitializer(S1, S2); RESULT.setLine(S1left); :};

StaticInitStart		::= (StaticInitStart) STATIC {: RESULT=new StaticInitStart(); :};

Statement			::= Matched:M1 {: RESULT=new StatementDerived1(M1); RESULT.setLine(M1left); :} 
						|
						Unmatched:U1 {: RESULT=new StatementDerived2(U1); RESULT.setLine(U1left); :};

StatementList		::= StatementList:S1 Statement:S2 {: RESULT=new StatementListDerived1(S1, S2); RESULT.setLine(S1left); :}
						| {: RESULT=new StatementListDerived2(); :}
						;

Unmatched			::=	(UnmatchedIf)IF IfCond:I1 Condition:C2 IfBodyStart:I3 Statement:S4 {: RESULT=new UnmatchedIf(I1, C2, I3, S4); RESULT.setLine(I1left); :}
						|
						(UnmatchedIfElse) IF IfCond:I1 Condition:C2 IfBodyStart:I3 Matched:M4 ElseStart:E5 Unmatched:U6 {: RESULT=new UnmatchedIfElse(I1, C2, I3, M4, E5, U6); RESULT.setLine(I1left); :}
						|
						(UnmatchedFor) ForLoopUnmatched:F1 {: RESULT=new UnmatchedFor(F1); RESULT.setLine(F1left); :};



Matched 			::= (MatchedDesig)DesignatorStatement:D1 SEMI {: RESULT=new MatchedDesig(D1); RESULT.setLine(D1left); :}
						|
						(MatchedIfElse)IF IfCond:I1 Condition:C2 IfBodyStart:I3 Matched:M4 ElseStart:E5 Matched:M6 {: RESULT=new MatchedIfElse(I1, C2, I3, M4, E5, M6); RESULT.setLine(I1left); :}
						|
						(MatchedBreak)BREAK SEMI {: RESULT=new MatchedBreak(); :}
						|
						(MatchedContinue)CONTINUE SEMI {: RESULT=new MatchedContinue(); :}
						|
						(MatchedVoidReturn) RETURN SEMI {: RESULT=new MatchedVoidReturn(); :}
						| 
						(MatchedExprReturn) RETURN Expr:E1 SEMI {: RESULT=new MatchedExprReturn(E1); RESULT.setLine(E1left); :}
						|
						(MatchedRead)READ LPAREN Designator:D1 RPAREN SEMI {: RESULT=new MatchedRead(D1); RESULT.setLine(D1left); :}
						|
						(MatchedPrint)PRINT LPAREN Expr:E1 OptCommaNumConst:O2 RPAREN SEMI {: RESULT=new MatchedPrint(E1, O2); RESULT.setLine(E1left); :} 
						|
						(MatchedFor)ForLoopMatched:F1 {: RESULT=new MatchedFor(F1); RESULT.setLine(F1left); :}
						|
						LBRACE StatementList:S1 RBRACE {: RESULT=new MatchedDerived1(S1); RESULT.setLine(S1left); :};

ForLoopMatched			::= (ForMatched) ForStart:F1 LPAREN OptDesignStmtList:O2 ForCond:F3 OptCondFact:O4 SEMI OptDesignStmtList:O5 ForBodyStart:F6 Matched:M7 {: RESULT=new ForMatched(F1, O2, F3, O4, O5, F6, M7); RESULT.setLine(F1left); :};

ForLoopUnmatched		::= (ForUnmatched) ForStart:F1 LPAREN OptDesignStmtList:O2 ForCond:F3 OptCondFact:O4 SEMI OptDesignStmtList:O5 ForBodyStart:F6 Unmatched:U7 {: RESULT=new ForUnmatched(F1, O2, F3, O4, O5, F6, U7); RESULT.setLine(F1left); :};

IfStart 			::= IF {: RESULT=new IfStartDerived1(); :};
ElseStart			::= (ElseStart)ELSE {: RESULT=new ElseStart(); :};
ForCond				::= (ForCond) SEMI {: RESULT=new ForCond(); :};
IfCond				::= (IfCond) LPAREN {: RESULT=new IfCond(); :};
IfBodyStart			::= (IfBodyStart) RPAREN {: RESULT=new IfBodyStart(); :};
ForStart			::= (ForStart) FOR {: RESULT=new ForStart(); :};
ForBodyStart		::= (ForBodyStart) RPAREN {: RESULT=new ForBodyStart(); :};

OptCondFact			::= CondFact:C1 {: RESULT=new OptCondFactDerived1(C1); RESULT.setLine(C1left); :} 
						| {: RESULT=new OptCondFactDerived2(); :}
						;

OptDesignStmtList 	::= DesignStmtList:D1 {: RESULT=new OptDesignStmtListDerived1(D1); RESULT.setLine(D1left); :} 
						| {: RESULT=new OptDesignStmtListDerived2(); :}
						;

DesignStmtList 		::= DesignStmtList:D1 COMMA DesignatorStatement:D2 {: RESULT=new DesignStmtListDerived1(D1, D2); RESULT.setLine(D1left); :}
						|
						DesignatorStatement:D1 {: RESULT=new DesignStmtListDerived2(D1); RESULT.setLine(D1left); :};
						
OptCommaNumConst		::= (OptComma)COMMA NUMBER:val {: RESULT=new OptComma(val); RESULT.setLine(valleft); :}
						|
						(NoOptComma) {: RESULT=new NoOptComma(); :};

Condition			::= (OrCond)Condition:C1 OR CondTerm:C2 {: RESULT=new OrCond(C1, C2); RESULT.setLine(C1left); :}
						|
						(TermCond)CondTerm:C1 {: RESULT=new TermCond(C1); RESULT.setLine(C1left); :};


CondTerm			::= (AndCondTerm)CondTerm:C1 AND CondFact:C2 {: RESULT=new AndCondTerm(C1, C2); RESULT.setLine(C1left); :}
						|
						(FactCondTerm)CondFact:C1 {: RESULT=new FactCondTerm(C1); RESULT.setLine(C1left); :}; 

CondFact			::= (RelopCondFact) Expr:E1 Relop:R2 Expr:E3 {: RESULT=new RelopCondFact(E1, R2, E3); RESULT.setLine(E1left); :}
						|
						(ExprCondFact) Expr:E1 {: RESULT=new ExprCondFact(E1); RESULT.setLine(E1left); :};


/* DesignatorStatement, designators and expressions working  */
DesignatorStatement ::= (AssignDesigStmt) Designator:D1 Assignop:A2 Expr:E3 {: RESULT=new AssignDesigStmt(D1, A2, E3); RESULT.setLine(D1left); :} 
						|
						(CallDesigStmt) Designator:D1 Call:C2 {: RESULT=new CallDesigStmt(D1, C2); RESULT.setLine(D1left); :}
						|
						(IncDesigStmt) Designator:D1 INC {: RESULT=new IncDesigStmt(D1); RESULT.setLine(D1left); :}
						|
						(DecDesigStmt) Designator:D1 DEC {: RESULT=new DecDesigStmt(D1); RESULT.setLine(D1left); :}
						|
						(MulAssignDesigStmt) MulAssignStart:M1 DesignatorList:D2 MUL Designator:D3 RSQBRACE EQUAL Designator:D4 {: RESULT=new MulAssignDesigStmt(M1, D2, D3, D4); RESULT.setLine(M1left); :}
						;

MulAssignStart		::= (MulAssignStart) LSQBRACE {: RESULT=new MulAssignStart(); :};


DesignatorList		::= (DesigListDesig) DesignatorList:D1 Designator:D2 COMMA {: RESULT=new DesigListDesig(D1, D2); RESULT.setLine(D1left); :} 
						|
						(DesigListComma) DesignatorList:D1 COMMA {: RESULT=new DesigListComma(D1); RESULT.setLine(D1left); :}
						|
						(NoDesigList) {: RESULT=new NoDesigList(); :};

Expr				::= (ExprAdd) Expr:E1 Addop:A2 Term:T3 {: RESULT=new ExprAdd(E1, A2, T3); RESULT.setLine(E1left); :}
						|
						(ExprUminus) UnMinus:U1 Term:T2 {: RESULT=new ExprUminus(U1, T2); RESULT.setLine(U1left); :}
						;

Term				::=	(MulopFactor) Term:T1 Mulop:M2 Factor:F3 {: RESULT=new MulopFactor(T1, M2, F3); RESULT.setLine(T1left); :}
						|
						(CasualFactor) Factor:F1 {: RESULT=new CasualFactor(F1); RESULT.setLine(F1left); :}
						;

ActPars				::= (ActParMore) ActPars:A1 COMMA Expr:E2 {: RESULT=new ActParMore(A1, E2); RESULT.setLine(A1left); :}
						|
						(ActParFirst) Expr:E1 {: RESULT=new ActParFirst(E1); RESULT.setLine(E1left); :}
						;
						

Factor				::= (DesigFactor)DesignatorFactor:D1 {: RESULT=new DesigFactor(D1); RESULT.setLine(D1left); :}
						|
						(NumberFactor)NUMBER:val {: RESULT=new NumberFactor(val); RESULT.setLine(valleft); :}
						|
						(CharFactor)CHAR:val {: RESULT=new CharFactor(val); RESULT.setLine(valleft); :}
						|
						(BoolFactor)BOOL:val {: RESULT=new BoolFactor(val); RESULT.setLine(valleft); :}
						|
						(AllocFactor)NewFactor:N1 {: RESULT=new AllocFactor(N1); RESULT.setLine(N1left); :}
						|
						(ParenFactor) LPAREN Expr:E1 RPAREN {: RESULT=new ParenFactor(E1); RESULT.setLine(E1left); :}
						;

NewFactor			::= (ArrayNewFactor) NEW Type:T1 Index:I2 {: RESULT=new ArrayNewFactor(T1, I2); RESULT.setLine(T1left); :}
						|
						(CasualNewFactor) NEW Type:T1 OptParen:O2 {: RESULT=new CasualNewFactor(T1, O2); RESULT.setLine(T1left); :}
						;
						
OptParen			::= LPAREN RPAREN {: RESULT=new OptParenDerived1(); :}
						| {: RESULT=new OptParenDerived2(); :}
						;

DesignatorFactor 	::= (CasualDesigFact) Designator:D1 {: RESULT=new CasualDesigFact(D1); RESULT.setLine(D1left); :}
						|
						(MethDesigFact) Designator:D1 Call:C2 {: RESULT=new MethDesigFact(D1, C2); RESULT.setLine(D1left); :}
						;

Designator			::= (Designator) DesignatorRef:D1 Members:M2 {: RESULT=new Designator(D1, M2); RESULT.setLine(D1left); :};

DesignatorRef		::= (NamespaceDesignatorRef) IDENT:nsName COLON COLON IDENT:varName {: RESULT=new NamespaceDesignatorRef(nsName, varName); RESULT.setLine(nsNameleft); :}
						|
						(CasualDesignatorRef) IDENT:varName {: RESULT=new CasualDesignatorRef(varName); RESULT.setLine(varNameleft); :}
						;

Members				::= (DesigField) Members:M1 DOT IDENT:name {: RESULT=new DesigField(M1, name); RESULT.setLine(M1left); :}
						| 
						(DesigElem) Members:M1 Index:I2 {: RESULT=new DesigElem(M1, I2); RESULT.setLine(M1left); :}
						|
						(NoDesigMem) {: RESULT=new NoDesigMem(); :};

Call				::= CallStart:C1 ActPars:A2 CallEnd:C3 {: RESULT=new CallDerived1(C1, A2, C3); RESULT.setLine(C1left); :}
						|
						CallStart:C1 CallEnd:C2 {: RESULT=new CallDerived2(C1, C2); RESULT.setLine(C1left); :}
						;

CallStart			::= (CallStart) LPAREN {: RESULT=new CallStart(); :};
CallEnd				::= (CallEnd)	RPAREN {: RESULT=new CallEnd(); :};


Index				::= (Index) IndexStart:I1 Expr:E2 IndexEnd:I3 {: RESULT=new Index(I1, E2, I3); RESULT.setLine(I1left); :};

IndexStart			::= (IndexStart) LSQBRACE {: RESULT=new IndexStart(); :};

IndexEnd			::= (IndexEnd) RSQBRACE {: RESULT=new IndexEnd(); :};

Label				::=	IDENT:I1 {: RESULT=new LabelDerived1(I1); RESULT.setLine(I1left); :};

UnMinus				::= (UnMinusTrue) MINUS {: RESULT=new UnMinusTrue(); :}
						|
						(UnMinusFalse) {: RESULT=new UnMinusFalse(); :} ;

Assignop			::=	(AssignOp) EQUAL {: RESULT=new AssignOp(); :};

Relop				::=	(RelopEq) EQUALSTO {: RESULT=new RelopEq(); :} 
						| (RelopDiff) DIFFERENT {: RESULT=new RelopDiff(); :} 
						| (RelopGr)GREATER {: RESULT=new RelopGr(); :} 
						| (RelopGre)GREATERE {: RESULT=new RelopGre(); :} 
						| (RelopLess)LESS {: RESULT=new RelopLess(); :} 
						| (RelopLesse)LESSE {: RESULT=new RelopLesse(); :}
						;
						
Addop				::= (AddopPlus)PLUS {: RESULT=new AddopPlus(); :}
						| (AddopMinus)MINUS {: RESULT=new AddopMinus(); :}
						;
						
Mulop				::= (MulopMul)MUL {: RESULT=new MulopMul(); :} 
						| (MulopDiv)DIV {: RESULT=new MulopDiv(); :} 
						| (MulopMod)MOD {: RESULT=new MulopMod(); :}
						;



/* List of declarations: WORKS */
DeclList			::= DeclList:D1 Declaration:D2 {: RESULT=new DeclListDerived1(D1, D2); RESULT.setLine(D1left); :}
						| {: RESULT=new DeclListDerived2(); :}
						;

Declaration			::= ConstDecl:C1 {: RESULT=new DeclarationDerived1(C1); RESULT.setLine(C1left); :} 
						| 
						ClassDecl:C1 {: RESULT=new DeclarationDerived2(C1); RESULT.setLine(C1left); :}
						|
						VarDecl:V1 {: RESULT=new DeclarationDerived3(V1); RESULT.setLine(V1left); :}
						;


/* Constant declarations: WORKS */


							  /* TODO: separate types on different declarations maybe */
ConstDecl			::= (ConstDecl) CONST ParamType:P1 ConstList:C2 SEMI {: RESULT=new ConstDecl(P1, C2); RESULT.setLine(P1left); :};


								  /* TODO: maybe ConstDeclaration */
ConstList			::= (ConstListMore) ConstList:C1 COMMA IDENT:Name EQUAL Constant:C2 {: RESULT=new ConstListMore(C1, Name, C2); RESULT.setLine(C1left); :}
						|
						(ConstListStart) IDENT:Name EQUAL Constant:C1 {: RESULT=new ConstListStart(Name, C1); RESULT.setLine(Nameleft); :}
						;

Constant			::= (ConstNum) NUMBER:val {: RESULT=new ConstNum(val); RESULT.setLine(valleft); :}
						| 
						(ConstChar) CHAR:val {: RESULT=new ConstChar(val); RESULT.setLine(valleft); :}
						| 
						(ConstBool) BOOL:val {: RESULT=new ConstBool(val); RESULT.setLine(valleft); :}
						;

/* Varibale declarations: WORKS */
VarDeclList			::= (VarDecls) VarDeclList:V1 VarDecl:V2 {: RESULT=new VarDecls(V1, V2); RESULT.setLine(V1left); :}
						|
						(NoVarDecl) {: RESULT=new NoVarDecl(); :};

VarDecl				::= (VarDecl) ParamType:P1 VarList:V2 SEMI {: RESULT=new VarDecl(P1, V2); RESULT.setLine(P1left); :};

VarList				::= VarList:V1 COMMA Variable:V2 {: RESULT=new VarListDerived1(V1, V2); RESULT.setLine(V1left); :}
						|
						Variable:V1 {: RESULT=new VarListDerived2(V1); RESULT.setLine(V1left); :}
						;
						
Variable 			::= (CasualVar) IDENT:Name {: RESULT=new CasualVar(Name); RESULT.setLine(Nameleft); :}
						|
						(ArrayVar) ArrVar:A1 {: RESULT=new ArrayVar(A1); RESULT.setLine(A1left); :}
						;

ArrVar				::= (ArrVar) IDENT:Name LSQBRACE RSQBRACE {: RESULT=new ArrVar(Name); RESULT.setLine(Nameleft); :};

Type				::= (NamespaceType) IDENT:nsName COLON COLON IDENT:varName {: RESULT=new NamespaceType(nsName, varName); RESULT.setLine(nsNameleft); :}
						|
						(CasualType) IDENT:varName {: RESULT=new CasualType(varName); RESULT.setLine(varNameleft); :}
						;

ParamType			::= (ParamType) Type:T1 {: RESULT=new ParamType(T1); RESULT.setLine(T1left); :};

